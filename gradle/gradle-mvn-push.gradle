// source: https://github.com/square/leakcanary/blob/b39bddf41bb0dcacf5f1fd7279c4a19c331b59e1/gradle/gradle-mvn-push.gradle

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

apply from: rootProject.file("gradle/inject-credential.gradle")

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                def proxyConfig = resolveProxySettings(project)

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    proxy(proxyConfig)
                }

                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    proxy(proxyConfig)
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }

            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    def plugins = project.getPlugins()
    if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        artifacts {
            archives androidSourcesJar
            archives androidJavadocsJar
        }
    } else {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocsJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocsJar
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}

/**
 * 读取 gradle.properties 中的代理设置，支持 http, https。如 systemProp.http.proxyHost=127.0.0.1 等
 *
 * 如果公司的网络有负载均衡，上传到 Sonatype OSS 时很可能出现一次上传的文件被分散到了多个 staging repository，
 * 这是有因为上传过程中出口 IP 地址变了。 这种情况下设置一个外部代理可以解决这个问题。
 * 详见： https://issues.sonatype.org/browse/OSSRH-19485
 * @param project
 * @return 适用于 mavenDeployer.repository.proxy() 函数的参数
 */
static Map<String, ?> resolveProxySettings(Project project) {
    final Map<String, ?> properties = project.properties

    for (String proxyType in ["http", "https"]) {
        Set<String> requiredKeys = ["proxyHost", "proxyPort"].collect { "systemProp.${proxyType}.${it}".toString() }

        if (properties.keySet().containsAll(requiredKeys)) {
            final Map<String, ?> proxyConfig = new HashMap<>()

            String key = "systemProp.${proxyType}.proxyHost".toString()
            proxyConfig.put("host", properties.get(key) as String)

            key = "systemProp.${proxyType}.proxyPort".toString()
            proxyConfig.put("port", properties.get(key) as int)

            key = "systemProp.${proxyType}.nonProxyHosts".toString()
            if (properties.containsKey(key)) {
                proxyConfig.put("nonProxyHosts", properties.get(key))
            }

            return proxyConfig
        }
    }
    return Collections.emptyMap()
}
